% Model matematic:
% insert(l1...ln, list) =
% 	list, n = 0
% 	{l1} U insert(l2...ln, list), otherwise

% insert(L:list, LIST:list, R:list)
% (i,i,o)

% Predicate: insert/3
% Description: Inserts elements from the first list into the second list.
% Parameters:
%   - If the first list is empty, the result is the second list.
%   - Otherwise, the head of the first list is added to the result list, and the predicate is recursively called with the rest of the first list and the second list.

insert([], SecondList, SecondList).
insert([Head|Tail], SecondList, [Head|Result]) :-
    insert(Tail, SecondList, Result).

% substituteElem(l1l2...ln, e1, p1p2...pm) = 
% = [], if n = 0
% = substituteElem(insert(p1p2...pm, l2...ln), e1, p1p2...pm), if l1 = e1
% = {l1} U substituteElem(l2...ln, e1, p1p2...pm), otherwise

% substituteElem(L:list, E:number, P:list, R:list)
% (i,i,i,o)

% Predicate: substituteElem/4
% Description: Substitutes an element in a list with another list.
% Parameters:
%   - If the input list is empty, the result is an empty list.
%   - If the head of the input list matches the element to be substituted (ElementToReplace), 
%     the predicate inserts the substitution list (ReplacementList) after the element and 
%     continues with the rest of the list.
%   - If the head of the input list does not match the element to be substituted (ElementToReplace),
%     the head is retained in the result, and the predicate continues with the rest of the list.

substituteElem([], _, _, []).
substituteElem([Head|Tail], ElementToReplace, ReplacementList, Result) :-
    Head =:= ElementToReplace,               % If Head is equal to ElementToReplace
    insert(ReplacementList, Tail, ResultingList),      % Insert ReplacementList after Head in the rest of the list
    substituteElem(ResultingList, ElementToReplace, ReplacementList, Result), !. % Continue with the modified list
substituteElem([Head|Tail], ElementToReplace, ReplacementList, [Head|Result]) :-
    Head =\= ElementToReplace,               % If Head is not equal to ElementToReplace
    substituteElem(Tail, ElementToReplace, ReplacementList, Result).   % Continue with the rest of the list
